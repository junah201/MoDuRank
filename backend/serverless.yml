service: modurank
useDotenv: true

provider:
  name: aws
  runtime: python3.10
  region: ap-northeast-2
  profile: modurank
  logRetentionInDays: 14
  architecture: arm64
  memorySize: 128
  timeout: 15
  versionFunctions: false
  stage: prod
  environment:
    DYNAMODB_TABLE: modurank-db
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-northeast-2:*:*"
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: "arn:aws:kms:*:*:*"
  logs:
    lambda:
      logFormat: JSON
      applicationLogLevel: INFO
      systemLogLevel: INFO

functions:
  init_room:
    handler: lambdas/init_room.handler
    name: init_room
    events:
      - http:
          path: rooms
          method: post
          cors: true

  register_user:
    handler: lambdas/register_user.handler
    name: register_user
    events:
      - http:
          path: users
          method: post
          cors: true

  login:
    handler: lambdas/login.handler
    name: login
    events:
      - http:
          path: login
          method: post
          cors: true

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: MoDuRank-API
        Description: API for modurank.junah.dev

    ApiGatewayCustomDomain:
      Type: AWS::ApiGateway::DomainName
      Properties:
        DomainName: api.modurank.junah.dev
        RegionalCertificateArn: arn:aws:acm:ap-northeast-2:529088284282:certificate/2b22fc86-4182-411b-8fea-2fd58a4ffc35
        EndpointConfiguration:
          Types:
            - REGIONAL
        SecurityPolicy: TLS_1_2

    ApiGatewayBasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn:
        - ApiGatewayCustomDomain
        - ApiGatewayRestApi
      Properties:
        DomainName:
          Ref: ApiGatewayCustomDomain
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI-SK
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI-email
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ReactAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: modurank.junah.dev
        VersioningConfiguration:
          Status: Suspended
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    ReactAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ReactAppS3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: ReactAppS3Bucket
                    - "/*"

    ReactAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName:
                Fn::Join:
                  - ""
                  - - Ref: ReactAppS3Bucket
                    - ".s3-website."
                    - Ref: AWS::Region
                    - ".amazonaws.com"
              Id: ReactAppOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
                OriginSSLProtocols:
                  - TLSv1
                  - TLSv1.1
                  - TLSv1.2
          DefaultCacheBehavior:
            TargetOriginId: ReactAppOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          DefaultRootObject: index.html
          Aliases:
            - modurank.junah.dev
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:529088284282:certificate/9144cec7-993a-4cdc-89ba-6f4149237063
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2018
          HttpVersion: http2and3
          PriceClass: PriceClass_200

    GitHubOIDCProvider:
      Type: AWS::IAM::OIDCProvider
      Properties:
        Url: "https://token.actions.githubusercontent.com"
        ClientIdList:
          - "sts.amazonaws.com"
        ThumbprintList:
          - "6938fd4d98bab03faadb97b34396831e3780aea1"
          - "1c58a3a8518e8759bf075b76b750d4f2df264fcd"

    GithubActionsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GithubActionsRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sts:AssumeRoleWithWebIdentity
              Principal:
                Federated:
                  - Fn::GetAtt: [GitHubOIDCProvider, Arn]
              Condition:
                StringLike:
                  token.actions.githubusercontent.com:sub: "repo:junah201/MoDuRank:*"
        Policies:
          - PolicyName: GithubActionsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                    - s3:ListBucket
                  Resource:
                    - Fn::Sub: "arn:aws:s3:::${ReactAppS3Bucket}"
                    - Fn::Sub: "arn:aws:s3:::${ReactAppS3Bucket}/*"
                - Effect: Allow
                  Action:
                    - cloudfront:CreateInvalidation
                  Resource:
                    - Fn::Sub: "arn:aws:cloudfront::${AWS::AccountId}:distribution/${ReactAppCloudFrontDistribution}"

package:
  include:
    - "lambdas/**"
    - "shared/**"
    - "poetry.lock"
    - "pyproject.toml"
  exclude:
    - "node_modules/**"
    - "venv/**"
    - "serverless.yml"
    - ".serverless/**"
    - ".ruff_cache/**"

custom:
  pythonRequirements:
    usePoetry: true
    requirePoetryLockFile: false
    useStaticCache: false
    useDownloadCache: false
    pipCmdExtraArgs:
      - "--platform manylinux2014_aarch64"
      - "--implementation cp"
      - "--python-version 3.10"
      - "--only-binary=:all:"
      - "--upgrade"

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
